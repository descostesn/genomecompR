% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R
\docType{class}
\name{genomicCompartments-class}
\alias{genomicCompartments-class}
\alias{genomicCompartments}
\title{Genomic Compartments Class}
\description{
The `genomicCompartments` class is designed to store  various genomic data,
including reference peaks, gene annotations, and different types of genomic
regions such as promoters, enhancers, and chromatin domains.
}
\section{Slots}{

\describe{
\item{\code{referencePeaks}}{A `GRanges` object containing reference peaks
(required).}

\item{\code{geneAnnotations}}{A `GRangesList` object containing gene annotations
(required).}

\item{\code{curatedAnno}}{A `GRanges` object for curated annotations.}

\item{\code{activeProm}}{A `GRanges` object for active promoters defined as K27ac in
TSS-/+1Kb.}

\item{\code{activeEnh}}{A `GRanges` object for active enhancers defined as
H3K27ac/H3K4me1/ATAC-seq. They should not overlap with the combination of
UCSC refGene, NCBI RefSeq, and GENCODE VM25.}

\item{\code{poisedEnh}}{A `GRanges` object for poised enhancers defined as
H3K27me3/H3K4me1/PRC2. They should not overlap with the combination of UCSC
refGene, NCBI RefSeq, and GENCODE VM25. Note: use a non redundant set of
genes i.e. no overlap, remove genes closer to 1kb from one another,
remove genes that are too short i.e. length < 2kb.}

\item{\code{PcGDomain}}{A `GRanges` object for PcG domains defined as Suz12 and
RING1B overlap.}

\item{\code{heteroChrom}}{A `GRanges` object for heterochromatin regions (H3K9me3)}

\item{\code{bivalentProm}}{A `GRanges` object for bivalent promoters defined as
the overlap of H3K4me3/H3K27me3.}

\item{\code{initiation}}{A `GRanges` object for initiation regions defined as
TSS-1/+1kb overlapping with Ser5P peaks.}

\item{\code{elongation}}{A `GRanges` object for elongation regions defined as
TSS+1kb to TES overlapping Ser2P.}

\item{\code{termination}}{A `GRanges` object for termination regions defined as
TES+1kb}

\item{\code{SINE}}{A `GRanges` object for SINE elements.}

\item{\code{LINE}}{A `GRanges` object for LINE elements.}

\item{\code{LTR}}{A `GRanges` object for LTR elements.}

\item{\code{regionsMatrix}}{A matrix representing various regions.}

\item{\code{glcPeakVals}}{A list of glucnac peaks.}

\item{\code{activePromWithPeaks}}{A `GRanges` object for active promoters with glc
peaks.}

\item{\code{activeEnhWithPeaks}}{A `GRanges` object for active enhancers with glc
peaks.}

\item{\code{poisedEnhWithPeaks}}{A `GRanges` object for poised enhancers with glc
peaks.}

\item{\code{PcGDomainWithPeaks}}{A `GRanges` object for PcG domains with glc peaks.}

\item{\code{heteroChromWithPeaks}}{A `GRanges` object for heterochromatin regions
with glc peaks.}

\item{\code{bivalentPromWithPeaks}}{A `GRanges` object for bivalent promoters with
glc peaks.}

\item{\code{initiationWithPeaks}}{A `GRanges` object for initiation regions with
glc peaks.}

\item{\code{elongationWithPeaks}}{A `GRanges` object for elongation regions with glc
peaks.}

\item{\code{terminationWithPeaks}}{A `GRanges` object for termination regions with
glc peaks.}
}}

\section{Constructor}{

new("genomicCompartments",
           referencePeaks = grglc,
           geneAnnotations = grlist, ...)
}

\section{Accessors}{


In the following snippets, x is a genomicCompartments object.

getRefPeaks(x): Get the reference glc peaks
getGenesFullAnno(x): Get the full gene annotations
getCuratedAnno(x): Get the curated annotations
getActiveProm(x): Get the active promoters
getActiveEnh(x): Get the active enhancers
getPoisedEnh(x): Get the poised enhancers
getPcGDomain(x): Get the PcG domains
getHeteroChrom(x): Get the heterochromatin regions
getBivalentProm(x): Get the bivalent promoters
getInitiation(x): Get the initiation regions
getElongation(x): Get the elongation regions
getTermination(x): Get the termination regions
getSINE(x): Get the SINE regions
getLINE(x): Get the LINE regions
getLTR(x): Get the LTR regions
getRegionsMatrix(x): Get the regions matrix
getGlcPeakVal(x): Get the glc peak values
getActivePromWithPeaks(x): Get the active promoters with glc peaks
getActiveEnhWithPeaks(x): Get the active enhancers with glc peaks
getPoisedEnhWithPeaks(x): Get the poised enhancers with glc peaks
getPcGDomainWithPeaks(x): Get the PcG domains with glc peaks
getHeteroChromWithPeaks(x): Get the heterochromatin regions with glc peaks
getBivalentPromWithPeaks(x): Get the bivalent promoters with glc peaks
getInitiationWithPeaks(x): Get the initiation regions with glc peaks
getElongationWithPeaks(x): Get the elongation regions with glc peaks
getTerminationWithPeaks(x): Get the termination regions with glc peaks
}

\section{Subsetting}{


In the following snippets, x is a genomicCompartments object.

setCurratedAnno(x, value): Set the curated annotations
setActivePromoters(x, value): Set the active promoters
setInitiationSer5PProm(x, value): Set the initiation Ser5P promoters
setElongationSer2P(x, value): Set the elongation Ser2P regions
setTermination(x, value): Set the termination regions
setBivalentProm(x, value): Set the bivalent promoters
setActiveEnhancer(x, value): Set the active enhancers
setPoisedEnhancer(x, value): Set the poised enhancers
setPolycombsDomain(x, value): Set the PcG domains
setHeterochromatin(x, value): Set the heterochromatin regions
setSINE(x, value): Set the SINE regions
setLINE(x, value): Set the LINE regions
setLTR(x, value): Set the LTR regions
setRegionsMatrix(x, value): Set the regions matrix
setGlcPeakVal(x, value): Set the glc peak values
setActivePromWithPeaks(x, value): Set the active promoters with glc peaks
setActiveEnhWithPeaks(x, value): Set the active enhancers with glc peaks
setPoisedEnhWithPeaks(x, value): Set the poised enhancers with glc peaks
setPcGDomainWithPeaks(x, value): Set the PcG domains with glc peaks
setHeteroChromWithPeaks(x, value): Set the heterochromatin regions with glc peaks
setBivalentPromWithPeaks(x, value): Set the bivalent promoters with glc peaks
setInitiationWithPeaks(x, value): Set the initiation regions with glc peaks
setElongationWithPeaks(x, value): Set the elongation regions with glc peaks
setTerminationWithPeaks(x, value): Set the termination regions with glc peaks
}

